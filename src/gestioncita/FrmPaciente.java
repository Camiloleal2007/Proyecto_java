package gestioncita;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author LENOVO-V14G3-ABA
 */
public class FrmPaciente extends javax.swing.JFrame {

    /**
     * Creates new form FrmPaciente
     */
    private DefaultTableModel modelo;
    private DefaultTableModel modeloCitasAtendidas;
    Operaciones operaciones = new Operaciones();
    FrmLogin login = new FrmLogin();
    String Nombre = login.Nombre();
    String Correo = login.Correo();
    String Telefono = login.Telefono();
    public static int eliminadas;

    public int eliminadas() {
        return eliminadas;
    }

    public FrmPaciente() {
        initComponents();
        modeloCitasAtendidas = new DefaultTableModel();
        System.out.println(Nombre);
        modelo = new DefaultTableModel();
        String[] ColumnaCitasMedicas = {"Fecha", "Hora", "Medico", "Especialidad", "Eliminar"};
        String[] columnasCitasAtendidas = {"Fecha", "Hora", "Paciente", "Medico", "Tipo Cita", "Diagnóstico", "Solución"};
        modelo.setColumnIdentifiers(ColumnaCitasMedicas);
        modeloCitasAtendidas.setColumnIdentifiers(columnasCitasAtendidas);
        TbCitasMedicas.setModel(modelo);
        TbHistorialMedico.setModel(modeloCitasAtendidas);
        TbCitasMedicas.getColumn("Eliminar").setCellRenderer(new ButtonRenderer());
        TbCitasMedicas.getColumn("Eliminar").setCellEditor(new ButtonEditor(new JCheckBox()));
        cargarTablaCitas();
        Lbname.setText(Nombre);
        LbCorreo.setText(Correo);
        LbCell.setText(Telefono);
    }

    public void cargarTablaCitas() {
        modelo.setRowCount(0);
        modeloCitasAtendidas.setRowCount(0);

        List<Object[]> citas = operaciones.obtenerCitasMedicas(Nombre);
        List<Object[]> citasAtendidas = operaciones.obtenerCitasAtendidas(Nombre);

        for (Object[] fila : citas) {
            Object[] nuevaFila = new Object[]{fila[0], fila[1], fila[2], fila[3], "Eliminar"};
            modelo.addRow(nuevaFila);
        }
        for (Object[] fila : citasAtendidas) {
            modeloCitasAtendidas.addRow(fila);
        }
    }

    class ButtonEditor extends DefaultCellEditor {

        protected JButton button;
        private JTable table;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Eliminar");
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int selectedRow = table.getSelectedRow();
                    if (selectedRow != -1) {
                        String fecha = table.getValueAt(selectedRow, 0).toString();
                        String hora = table.getValueAt(selectedRow, 1).toString();
                        String medico = table.getValueAt(selectedRow, 2).toString();
                        String especialidad = table.getValueAt(selectedRow, 3).toString();
                        eliminadas += 1;
                        operaciones.agregarcita(0, Nombre, medico, fecha, hora, especialidad);
                        ((DefaultTableModel) table.getModel()).removeRow(selectedRow);
                    }
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.table = table;
            button.setText("Eliminar");
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return "Eliminar";
        }
    }

    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setText("Eliminar");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            return this;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TbCitasMedicas = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        BtnAgendar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TbHistorialMedico = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        Lbname = new javax.swing.JLabel();
        LbCorreo = new javax.swing.JLabel();
        LbCell = new javax.swing.JLabel();
        BtnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel1.setText("Portal Del Paciente");

        jLabel2.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel2.setText("Gestione sus citas médicas e historial");

        TbCitasMedicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(TbCitasMedicas);

        jLabel3.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel3.setText("Citas Medicas Activas");

        BtnAgendar.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        BtnAgendar.setText("Agendar Cita");
        BtnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgendarActionPerformed(evt);
            }
        });

        TbHistorialMedico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane2.setViewportView(TbHistorialMedico);

        jLabel4.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel4.setText("Historial Medico");

        Lbname.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N

        LbCorreo.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N

        LbCell.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N

        BtnSalir.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        BtnSalir.setText("Salir");
        BtnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Lbname)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LbCell)
                        .addGap(180, 180, 180)
                        .addComponent(LbCorreo))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BtnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BtnAgendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnSalir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnAgendar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Lbname, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LbCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LbCell, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgendarActionPerformed
        // TODO add your handling code here:
        try {
            String fecha = JOptionPane.showInputDialog("Ingrese la fecha de la cita (yyyy-MM-dd):");

            if (fecha == null || fecha.trim().isEmpty()) {
                throw new IllegalArgumentException("La fecha no puede estar vacía.");
            }

            String[] horarios = {
                "7:00 AM - 7:45 AM", "8:00 AM - 8:45 AM", "9:00 AM - 9:45 AM",
                "10:00 AM - 10:45 AM", "11:00 AM - 11:45 AM", "1:00 PM - 1:45 PM",
                "2:00 PM - 2:45 PM", "3:00 PM - 3:45 PM", "4:00 PM - 4:45 PM", "5:00 PM - 5:45 PM"
            };

            String horaSeleccionada = (String) JOptionPane.showInputDialog(
                    null, "Seleccione la hora de la cita:", "Horario",
                    JOptionPane.QUESTION_MESSAGE, null, horarios, horarios[0]);

            if (horaSeleccionada == null || horaSeleccionada.trim().isEmpty()) {
                throw new IllegalArgumentException("La hora no puede estar vacía.");
            }

            String[] TipoCita = {"General", "Odontología", "Pediatría"};

            String especialidadSeleccionada = (String) JOptionPane.showInputDialog(
                    null, "Seleccione la especialidad de la cita:", "Especialidad",
                    JOptionPane.QUESTION_MESSAGE, null, TipoCita, TipoCita[0]);

            if (especialidadSeleccionada == null || especialidadSeleccionada.trim().isEmpty()) {
                throw new IllegalArgumentException("La especialidad no puede estar vacía.");
            }

            String NombreMedico = operaciones.SolicitarMedico(especialidadSeleccionada);

            if (NombreMedico == null || NombreMedico.trim().isEmpty()) {
                throw new IllegalArgumentException("No se pudo obtener un médico para la especialidad seleccionada.");
            }

            String citaAgregada = operaciones.agregarcita(1, Nombre, NombreMedico, fecha, horaSeleccionada, especialidadSeleccionada);

            if ("agregada".equals(citaAgregada)) {
                JOptionPane.showMessageDialog(null,
                        "Cita Agendada:\nFecha: " + fecha
                        + "\nHora: " + horaSeleccionada
                        + "\nMedico: " + NombreMedico
                        + "\nTipo_Cita: " + especialidadSeleccionada,
                        "Confirmación", JOptionPane.INFORMATION_MESSAGE);
                cargarTablaCitas();
            } else {
                cargarTablaCitas();
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_BtnAgendarActionPerformed

    private void BtnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSalirActionPerformed
        // TODO add your handling code here:
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BtnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgendar;
    private javax.swing.JButton BtnSalir;
    private javax.swing.JLabel LbCell;
    private javax.swing.JLabel LbCorreo;
    private javax.swing.JLabel Lbname;
    private javax.swing.JTable TbCitasMedicas;
    private javax.swing.JTable TbHistorialMedico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
